package amgen.ri.crypt;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.KeySpec;
import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.DESedeKeySpec;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

/**
 * Simple String Encryption/Decryption class.
 *
 */
public class StringEncrypter {
    //Available schemes
    public static final String DESEDE_ENCRYPTION_SCHEME = "DESede";
    public static final String DES_ENCRYPTION_SCHEME = "DES";
    //Super-secret decoder key
    public static final String DEFAULT_ENCRYPTION_KEY = "This is Jeff's default encryption key";

    //The crypt key
    private KeySpec keySpec;
    //Key factory
    private SecretKeyFactory keyFactory;
    //Cipher for the scheme
    private Cipher cipher;
    //Encoding
    private static final String UNICODE_FORMAT = "UTF8";

    /**
     * StringEncrypter constructor which uses the DESede encryption scheme
     *
     * @throws EncryptionException
     */
    public StringEncrypter() throws EncryptionException {
        this(DESEDE_ENCRYPTION_SCHEME);
    }

    /**
     * StringEncrypter constructor which uses the provided encryption scheme
     *
     * @param encryptionScheme String
     * @throws EncryptionException
     */
    public StringEncrypter(String encryptionScheme) throws EncryptionException {
        this(encryptionScheme, DEFAULT_ENCRYPTION_KEY);
    }

    /**
     * StringEncrypter constructor which uses the provided encryption scheme and
     * key
     *
     * @param encryptionScheme String
     * @param encryptionKey String
     * @throws EncryptionException
     */
    public StringEncrypter(String encryptionScheme, String encryptionKey) throws EncryptionException {
        if (encryptionKey == null) {
            throw new IllegalArgumentException("encryption key was null");
        }
        if (encryptionKey.trim().length() < 24) {
            throw new IllegalArgumentException(
                "encryption key was less than 24 characters");
        }
        try {
            byte[] keyAsBytes = encryptionKey.getBytes(UNICODE_FORMAT);

            if (encryptionScheme.equals(DESEDE_ENCRYPTION_SCHEME)) {
                keySpec = new DESedeKeySpec(keyAsBytes);
            } else if (encryptionScheme.equals(DES_ENCRYPTION_SCHEME)) {
                keySpec = new DESKeySpec(keyAsBytes);
            } else {
                throw new IllegalArgumentException("Encryption scheme not supported: "
                    + encryptionScheme);
            }
            keyFactory = SecretKeyFactory.getInstance(encryptionScheme);
            cipher = Cipher.getInstance(encryptionScheme);
        } catch (InvalidKeyException e) {
            throw new EncryptionException(e);
        } catch (UnsupportedEncodingException e) {
            throw new EncryptionException(e);
        } catch (NoSuchAlgorithmException e) {
            throw new EncryptionException(e);
        } catch (NoSuchPaddingException e) {
            throw new EncryptionException(e);
        }
    }

    /**
     * Encrypts the given string
     *
     * @param unencryptedString String
     * @return String
     * @throws EncryptionException
     */
    public String encrypt(String unencryptedString) throws EncryptionException {
        if (unencryptedString == null || unencryptedString.trim().length() == 0) {
            throw new IllegalArgumentException(
                "unencrypted string was null or empty");
        }
        try {
            SecretKey key = keyFactory.generateSecret(keySpec);
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] cleartext = unencryptedString.getBytes(UNICODE_FORMAT);
            byte[] ciphertext = cipher.doFinal(cleartext);
            BASE64Encoder base64encoder = new BASE64Encoder();
            return base64encoder.encode(ciphertext);
        } catch (Exception e) {
            throw new EncryptionException(e);
        }
    }

    /**
     * Decrypts the given encrypted text
     *
     * @param encryptedString String
     * @return String
     * @throws EncryptionException
     */
    public String decrypt(String encryptedString) throws EncryptionException {
        if (encryptedString == null || encryptedString.trim().length() <= 0) {
            throw new EncryptionException(new IllegalArgumentException("encrypted string was null or empty"));
        }
        try {
            SecretKey key = keyFactory.generateSecret(keySpec);
            cipher.init(Cipher.DECRYPT_MODE, key);
            BASE64Decoder base64decoder = new BASE64Decoder();
            byte[] cleartext = base64decoder.decodeBuffer(encryptedString);
            byte[] ciphertext = cipher.doFinal(cleartext);
            return new String(ciphertext);
        } catch (Exception e) {
            throw new EncryptionException(e);
        }
    }

    /**
     * An exception specific for the encryption class
     */
    public static class EncryptionException extends Exception {
        public EncryptionException(Throwable t) {
            super(t);
        }
    }

    /**
     * Example
     * @param args String[]
     */
    public static void main(String[] args) {
        try {
            String inputText = (args.length == 0 ? "MDLITEST" : args[0]);
            String encryptedText = new StringEncrypter().encrypt(inputText);
            String decryptedText = new StringEncrypter().decrypt("NozoylQUOtk=");
            System.out.printf("%-15s\t%s\n%-15s\t%s\n%-15s\t%s\n", new Object[] {
                              "Input Text:", inputText,
                              "Encrypted:", encryptedText,
                              "Decrypted:", decryptedText
            }
                );


        } catch (EncryptionException e) {
            e.printStackTrace();
        }
    }
}
