package amgen.ri.util;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.channels.FileChannel;
import java.io.FileOutputStream;
import java.nio.MappedByteBuffer;
import java.util.Map;
import java.io.Writer;
import java.net.HttpURLConnection;
import java.net.URLEncoder;
import java.io.OutputStreamWriter;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.util.Date;

/**
 * This class contains a set of static method utilities for operating on Files
 */
public class ExtFile {
    /**
     * Returns whether time between the now and the last time the file was
     * modified is greater than the given minutes
     *
     * @param file File
     * @param minutes long
     * @return boolean
     */
    public static boolean isOlderMinutes(File file, long minutes) {
        Date modified = new Date(file.lastModified());
        double millsDiff = System.currentTimeMillis() - modified.getTime();
        double minDiff = millsDiff / 60000;
        return (minDiff > minutes);
    }

    /**
     *  Deletes the given File and all members if it is a directory.
     *  Returns true if successful false if unable.
     */
    public static boolean deepdelete(File file) {
        if (file == null) {
            return false;
        }
        File[] files = file.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                if (files[i].isDirectory()) {
                    deepdelete(files[i]);
                } else {
                    if (!files[i].delete()) {
                        return false;
                    }
                }
            }
        }
        return file.delete();
    }

    /**
     * Reads a URL and given parameters added as a GET.
     *
     * @param url Reader
     * @param parameters Map
     * @param outWriter Writer
     * @return Writer
     * @throws IOException
     * @todo Implement this amgen.ri.asf.sa.xslt.TransformerIF method
     */
    public static Writer getURL(String url, Map<String, ? > parameters, Writer outWriter) throws IOException {
        StringBuffer paramBuffer = new StringBuffer();
        if (parameters != null) {
            for (String paramName : parameters.keySet()) {
                if (paramBuffer.length() > 0) {
                    paramBuffer.append("&");
                }
                paramBuffer.append(URLEncoder.encode(paramName, "UTF-8") + "=" +
                                   URLEncoder.encode(parameters.get(paramName) + "", "UTF-8"));
            }
        }
        InputStream in = new URL(url + (paramBuffer.length() > 0 ? "?" + paramBuffer : "")).openStream();
        InputStreamReader reader = new InputStreamReader(in);
        char[] buffer = new char[1024];
        int charsRead;
        while ( (charsRead = reader.read(buffer)) != -1) {
            outWriter.write(buffer, 0, charsRead);
        }
        reader.close();
        outWriter.flush();
        return outWriter;
    }

    /**
     * Reads a URL and given parameters added as a POST.
     *
     * @param url1 String
     * @param parameters Map
     * @param out OutputStream
     * @throws IOException
     */
    public static void postURL(String url, Map<String, ? > parameters, OutputStream out) throws IOException {
        //Pass-through the response from the connection InputStream to the
        //servlet OutputStream
        byte[] buffer = new byte[1024];
        int bytesRead;
        InputStream in = postURLInputStream(url, parameters);
        while ( (bytesRead = in.read(buffer)) != -1) {
            out.write(buffer, 0, bytesRead);
        }
        in.close();
        out.flush();
    }

    /**
     * Returns the InputStream for a POST.
     *
     * @param url String
     * @param parameters Map
     * @throws IOException
     * @return InputStream
     */
    public static InputStream postURLInputStream(String url, Map<String, ? > parameters) throws IOException {
        StringBuffer postRequest = new StringBuffer();
        if (parameters != null) {
            for (String paramName : parameters.keySet()) {
                if (postRequest.length() > 0) {
                    postRequest.append("&");
                }
                postRequest.append(URLEncoder.encode(paramName, "UTF-8") + "=" +
                                   URLEncoder.encode(parameters.get(paramName) + "", "UTF-8"));
            }
        }
        URL urlObj = new URL(url);
        HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection();

        conn.setDoOutput(true);
        if (postRequest.length() > 0) {
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream(), "UTF-8");
            wr.write(postRequest.toString());
            wr.flush();
        }
        return conn.getInputStream();
    }

    /**
     * Reads a URL and given parameters added as a POST.
     *
     * @param url1 String
     * @param parameters Map
     * @param out OutputStream
     * @throws IOException
     * @return Writer
     */
    public static Writer postURL(String url, Map<String, ? > parameters, Writer out) throws IOException {
        //Pass-through the response from the connection InputStream to the
        //servlet OutputStream
        char[] buffer = new char[1024];
        int bytesRead;
        InputStreamReader in = new InputStreamReader(postURLInputStream(url, parameters), "UTF-8");
        while ( (bytesRead = in.read(buffer)) != -1) {
            out.write(buffer, 0, bytesRead);

        }
        in.close();
        out.flush();
        return out;
    }

    /**
     * Reads a URL and given parameters added as a POST and returns the results
     * as a String.
     *
     * @param url String
     * @param parameters Map
     * @throws IOException
     * @return Writer
     */
    public static String postURL(String url, Map<String, ? > parameters) throws IOException {
        StringWriter writer = (StringWriter) postURL(url, parameters, new StringWriter());
        writer.close();
        return writer.toString();
    }

    /**
     * Reads a text File and returns the String
     * @param file File
     * @return String
     * @throws IOException
     */
    public static String readTextFile(File file) throws IOException {
        StringBuffer sb = new StringBuffer();
        FileReader reader = new FileReader(file);
        char[] buf = new char[1024];
        int count;
        while ( (count = reader.read(buf)) > 0) {
            sb.append(buf, 0, count);
        }
        reader.close();
        return sb.toString();
    }

    /**
     * Writes to a String to a text file
     *
     * @param file File
     * @param contents String
     * @return String
     * @throws IOException
     */
    public static File writeTextFile(File file, String contents) throws IOException {
        FileWriter writer = new FileWriter(file);
        writer.write(contents);
        writer.close();
        return file;
    }

    /**
     * Reads a text from a URL and returns the String
     * @param url URL
     * @return String
     * @throws IOException
     */
    public static String readTextFile(URL url) throws IOException {
        StringBuffer sb = new StringBuffer();
        Reader reader = new InputStreamReader(url.openStream());
        char[] buf = new char[1024];
        int count;
        while ( (count = reader.read(buf)) > 0) {
            sb.append(buf, 0, count);
        }
        reader.close();
        return sb.toString();
    }

    /**
     * Reads a File and returns the bytes
     * @param file File
     * @return byte[]
     * @throws IOException
     */
    public static byte[] readFile(File file) throws IOException {
        return readStream(new FileInputStream(file));
    }

    /**
     * Reads an InputStream and returns the bytes
     * @param in InputStream
     * @return byte[]
     * @throws IOException
     */
    public static byte[] readStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[1024];
        int count;
        while ( (count = in.read(buf)) > 0) {
            out.write(buf, 0, count);
        }
        in.close();
        return out.toByteArray();
    }

    /**
     * Reads a stream from the URL and returns the bytes
     *
     * @param url URL
     * @throws IOException
     * @return byte[]
     */
    public static byte[] readStream(URL url) throws IOException {
        return readStream(url.openStream());
    }

    /**
     * Fast & simple file copy.
     *
     * @param source File
     * @param dest File
     * @throws IOException
     */
    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }

    /**
     * Copies data from the InputStream to the OutputStream using a buffered
     * streams
     *
     * @param from InputStream
     * @param to OutputStream
     * @throws IOException
     */
    public static void copy(InputStream from, OutputStream to) throws IOException {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new BufferedInputStream(from);
            out = new BufferedOutputStream(to);
            while (true) {
                int data = in.read();
                if (data == -1) {
                    break;
                }
                out.write(data);
            }
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }

    /**
     * Copies data from the InputStream to the output file using a buffered
     * streams
     *
     * @param from InputStream
     * @param to OutputStream
     * @throws IOException
     */
    public static void copy(InputStream from, File to) throws IOException {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new BufferedInputStream(from);
            out = new BufferedOutputStream(new FileOutputStream(to));
            while (true) {
                int data = in.read();
                if (data == -1) {
                    break;
                }
                out.write(data);
            }
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }

    /**
     * Get the extension of a file.
     */
    public static String getExtension(File f) {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');

        if (i > 0 && i < s.length() - 1) {
            ext = s.substring(i + 1).toLowerCase();
        }
        return ext;
    }

}
