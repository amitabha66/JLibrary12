package amgen.ri.servlet;

import java.lang.reflect.Constructor;
import java.util.Date;
import java.util.TimeZone;
import javax.naming.NamingException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import amgen.ri.json.JSONException;
import amgen.ri.json.JSONObject;
import amgen.ri.ldap.AmgenLDAPAuthProvider;
import amgen.ri.ldap.AmgenLocationCode;
import amgen.ri.util.Debug;
import amgen.ri.util.ExtDate;
import amgen.ri.fasf.FASFEncrypter;

/**
 * Maintains the session user information
 */
public class SessionLogin {
    private Date authDate;
    private Date lastAccess;
    private String remoteUser;
    private String sessionID;
    private String userLedgerDisplayName; //Ledger- style display name of the user
    private String userPreferredDisplayName; //Standard- style display name of the user
    private TimeZone usersTimeZone; //User's TimeZone
    private AmgenLocationCode userAmgenLocationCode; //User's Location
    private String remoteMachineIP; //User's machine IP

    /**
     * Creates a new SessionLogin object. Only called by the getSessionLogin
     * method
     *
     * @param request HttpServletRequest
     */
    private SessionLogin(HttpServletRequest request) throws ServletException {
        String username = request.getRemoteUser();
        if (username == null) {
            throw new ServletException("No remote user");
        }
        String[] splitUsername = username.split("[\\/\\\\]+", 2);
        this.remoteUser = (splitUsername.length == 1 ? splitUsername[0] : splitUsername[1]);
        try {
            usersTimeZone = new AmgenLDAPAuthProvider().getTimeZone(this.remoteUser);
            userLedgerDisplayName = new AmgenLDAPAuthProvider().getLedgerDisplayName(this.remoteUser);
            userPreferredDisplayName = new AmgenLDAPAuthProvider().getPreferredDisplayName(this.remoteUser);
            userAmgenLocationCode = new AmgenLDAPAuthProvider().getLocationCode(this.remoteUser);
        } catch (NamingException ex) {
            usersTimeZone = AmgenLocationCode.getLocationTimeZone(AmgenLocationCode.USTO);
        }
        this.sessionID = request.getSession().getId();
        this.remoteMachineIP = request.getRemoteHost();
        this.authDate = new Date();

        request.getSession().setAttribute("SESSION_LOGIN_USERNAME", userLedgerDisplayName+" ("+remoteUser+")");
        Debug.print("SessionLogin- "+remoteUser);
    }

    /**
     * Creates a new SessionLogin object. Only called by the getSessionLogin
     * method
     *
     * @param request HttpServletRequest
     */
    protected SessionLogin(SessionLogin source) throws ServletException {
        this.authDate = (Date) source.authDate.clone();
        this.remoteUser = source.remoteUser;
        this.sessionID = source.sessionID;
        this.userLedgerDisplayName = source.userLedgerDisplayName;
        this.userPreferredDisplayName = source.userPreferredDisplayName;
        this.usersTimeZone = (TimeZone) source.usersTimeZone.clone();
        this.userAmgenLocationCode = source.userAmgenLocationCode;
        this.remoteMachineIP = source.remoteMachineIP;
        this.lastAccess= source.lastAccess;
    }

    /**
     * Retrieves or creates a new SessionLogin from the request
     *
     * @param request HttpServletRequest
     * @return SessionLogin
     * @throws AIGException
     */
    public static SessionLogin getSessionLogin(HttpServletRequest request) throws ServletException {
        if (request.getSession().getAttribute("SESSION_LOGIN") == null) {
            request.getSession().setAttribute("SESSION_LOGIN", new SessionLogin(request));
        }
        return (SessionLogin) request.getSession().getAttribute("SESSION_LOGIN");
    }

    /**
     * Returns the SessionLogin for the session. If none exists, returns null.
     *
     * @param session HttpSession
     * @return SessionLogin
     */
    public static SessionLogin getSessionLogin(HttpSession session) {
        return (SessionLogin)session.getAttribute("SESSION_LOGIN");
    }

    /**
     * Takes the current SessionLogin object and wraps it in a custom
     * SessionLogin child class. The child class MUST have a constructor of the
     * format <E>(SessionLogin, HttpServletRequest) or <E>(SessionLogin).
     * If not or if anything fails in the instantiation, this returns null
     *
     * @param request HttpServletRequest
     * @param clazz Class
     * @return SessionLogin
     */
    public static SessionLogin updateSessionLogin(HttpServletRequest request, Class clazz) {
        try {
            SessionLogin sessionLogin = getSessionLogin(request);
            Constructor cnstr = clazz.getConstructor(new Class[] {SessionLogin.class, HttpServletRequest.class});
            SessionLogin updatedSessionLogin = (SessionLogin) cnstr.newInstance(new Object[] {sessionLogin, request});
            request.getSession().setAttribute("SESSION_LOGIN", updatedSessionLogin);
            return updatedSessionLogin;
        } catch (Exception ex) {}
        try {
            SessionLogin sessionLogin = getSessionLogin(request);
            Constructor cnstr = clazz.getConstructor(new Class[] {SessionLogin.class});
            SessionLogin updatedSessionLogin = (SessionLogin) cnstr.newInstance(new Object[] {sessionLogin});
            request.getSession().setAttribute("SESSION_LOGIN", updatedSessionLogin);
            return updatedSessionLogin;
        } catch (Exception ex) {}
        return null;
    }

    /**
     * doesSessionLoginExist
     *
     * @param sessionObj Object
     */
    public static boolean doesSessionLoginExist(Object sessionObj) {
        HttpSession session;
        if (sessionObj instanceof HttpSession) {
            session = (HttpSession) sessionObj;
        } else if (sessionObj instanceof HttpServletRequest) {
            session = ( (HttpServletRequest) sessionObj).getSession(true);
        } else {
            throw new IllegalArgumentException("Argument not a session-containing object");
        }
        return (session.getAttribute("SESSION_LOGIN") != null);
    }

    /**
     * Returns the remote user
     *
     * @return String
     */
    public String getRemoteUser() {
        return remoteUser;
    }
    /**
     * Returns the remote user FASF encrypted
     *
     * @return String
     */
    public String getRemoteUserFASFEncrypted() {
        try {
            return new FASFEncrypter().encrypt(remoteUser);
        } catch (Exception ex) {
            return null;
        }
    }


    /**
     * A method only used for debugging-
     * It resets the remote user to another user
     *
     * @param remoteUser String
     */
    public void setRemoteUser(String remoteUser) {
        this.remoteUser= remoteUser;
    }

    /**
     * Returns the ledger style display name of the user
     *
     * @return String
     */
    public String getUserLedgerDisplayName() {
        return userLedgerDisplayName;
    }

    /**
     * Returns the standard/preferred style display name of the user
     *
     * @return String
     */
    public String getUserPreferredDisplayName() {
        return userPreferredDisplayName;
    }

    /**
     * Returns the ledger style display name of the given user
     *
     * @return String
     * @param login String
     */
    public String getUserLedgerDisplayName(String login) {
        if (login.equals(remoteUser)) {
            return userLedgerDisplayName;
        }
        return new AmgenLDAPAuthProvider().getLedgerDisplayName(login);
    }

    /**
     * Returns the standard/preferred style display name of the given user
     *
     * @return String
     * @param login String
     */
    public String getUserPreferredDisplayName(String login) {
        if (login.equals(remoteUser)) {
            return userPreferredDisplayName;
        }
        return new AmgenLDAPAuthProvider().getPreferredDisplayName(login);
    }

    /**
     * Returns the users timezone based on the users site
     *
     * @return TimeZone
     */
    public TimeZone getUsersTimeZone() {
        return usersTimeZone;
    }

    /**
     * Returns the AIG timezone based on the users site
     *
     * @return TimeZone
     */
    public TimeZone getAIGTimeZone() {
        return TimeZone.getTimeZone("America/Los_Angeles");
    }

    /**
     * Converts the given Date to the users TimeZone from the source TimeZone
     *
     * @param dateFormSpecifier String
     * @param date Date
     * @param sourceTimeZone TimeZone
     * @return String
     */
    public String convertToUserTimeZone(String dateFormSpecifier, Date date, TimeZone sourceTimeZone) {
        return ExtDate.getDateStringDate(dateFormSpecifier, date, sourceTimeZone, getUsersTimeZone());
    }

    /**
     * Returns the users Amgen location code
     *
     * @return AmgenLocationCode
     */
    public AmgenLocationCode getUserAmgenLocationCode() {
        return userAmgenLocationCode;
    }

    /**
     * Returns the session ID that this login is registered
     *
     * @return String
     */
    public String getSessionID() {
        return sessionID;
    }

    /**
     * Returns the remote machine's IP
     *
     * @return String
     */
    public String getRemoteMachineIP() {
        return remoteMachineIP;
    }

    /**
     * Returns the Date that this login was created
     *
     * @return Date
     */
    public Date getAuthDate() {
        return authDate;
    }

    /**
     * Returns the last access Date. Only gets set after a call to
     * updateLastAccess.
     *
     * @return Date
     */
    public Date getLastAccess() {
        return lastAccess;
    }

    /**
     * Gets the encrypter user name if the session was initiated by the FASF
     * system
     *
     * @return String
     */
    public String getCypherUser() {
        try {
            return new FASFEncrypter().encrypt(remoteUser);
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * Updates the last access date returning the previous last access or null
     * if there was not one
     *
     * @return Date
     */
    public Date updateLastAccess() {
        Date prevLastAccess= getLastAccess();
        this.lastAccess = new Date();
        return prevLastAccess;
    }

    /**
     * Utility returning whether it has been more than the given minutes since
     * the last access. Returns false is last access is null.
     *
     * @param mins long
     * @return boolean
     */
    public boolean isLastAccessGreater(long mins) {
        if (lastAccess== null) {
            return false;
        }
        double millisDiff= (new Date()).getTime() - lastAccess.getTime();
        double minsDiff= millisDiff/60000;
        return (minsDiff > mins);
    }

    /**
     * Returns the session login information as a JSON object
     *
     * @return JSONObject
     */
    public JSONObject getSessionInfo() {
        JSONObject sessionInfo = new JSONObject();
        try {
            sessionInfo.put("LOGIN", getRemoteUser());
            sessionInfo.put("DISPLAY_NAME", getUserLedgerDisplayName());
            sessionInfo.put("IP", getRemoteMachineIP());
            sessionInfo.put("LOCATION", getUserAmgenLocationCode());
            sessionInfo.put("TIMEZONE", getUsersTimeZone().getID());
            sessionInfo.put("SESSION_ID", getSessionID());
        } catch (JSONException ex) {}
        return sessionInfo;
    }


}
